#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new tree node
struct TreeNode* createNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to find LCA of two nodes p and q
struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {
    if (root == NULL)
        return NULL;

    // If root is either p or q, return root
    if (root == p || root == q)
        return root;

    // Recurse for left and right subtrees
    struct TreeNode* leftLCA = lowestCommonAncestor(root->left, p, q);
    struct TreeNode* rightLCA = lowestCommonAncestor(root->right, p, q);

    // If p and q found in both subtrees, root is LCA
    if (leftLCA != NULL && rightLCA != NULL)
        return root;

    // Otherwise return the non-NULL child
    return (leftLCA != NULL) ? leftLCA : rightLCA;
}

// Example usage
int main() {
    // Manually constructing the tree: [3, 5, 1, 6, 2, 0, 8, NULL, NULL, 7, 4]
    struct TreeNode* root = createNode(3);
    root->left = createNode(5);
    root->right = createNode(1);
    root->left->left = createNode(6);
    root->left->right = createNode(2);
    root->right->left = createNode(0);
    root->right->right = createNode(8);
    root->left->right->left = createNode(7);
    root->left->right->right = createNode(4);

    struct TreeNode* p = root->left;      // Node with value 5
    struct TreeNode* q = root->right;     // Node with value 1

    struct TreeNode* lca = lowestCommonAncestor(root, p, q);
    if (lca != NULL)
        printf("LCA of nodes %d and %d is %d\n", p->val, q->val, lca->val);
    else
        printf("LCA not found\n");

    return 0;
}
