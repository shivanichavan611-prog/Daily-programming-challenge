#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Definition for a binary tree node
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Helper function to create a new tree node
struct TreeNode* newNode(int value) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = value;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Helper function to check BST property with min/max limits
int isBSTUtil(struct TreeNode* node, long min, long max) {
    if (node == NULL)
        return 1;  // Empty tree is a BST

    // Current node's value must be in the (min, max) range
    if (node->val <= min || node->val >= max)
        return 0;

    // Recursively check left and right subtrees
    return isBSTUtil(node->left, min, node->val) &&
           isBSTUtil(node->right, node->val, max);
}

// Main function to check if a tree is a BST
int isValidBST(struct TreeNode* root) {
    return isBSTUtil(root, LONG_MIN, LONG_MAX);
}

// Example usage
int main() {
    // Example 1: Valid BST [2, 1, 3]
    struct TreeNode* root1 = newNode(2);
    root1->left = newNode(1);
    root1->right = newNode(3);

    if (isValidBST(root1))
        printf("Example 1: The tree is a valid BST.\n");
    else
        printf("Example 1: The tree is NOT a valid BST.\n");

    // Example 2: Invalid BST [5, 1, 4, null, null, 3, 6]
    struct TreeNode* root2 = newNode(5);
    root2->left = newNode(1);
    root2->right = newNode(4);
    root2->right->left = newNode(3);
    root2->right->right = newNode(6);

    if (isValidBST(root2))
        printf("Example 2: The tree is a valid BST.\n");
    else
        printf("Example 2: The tree is NOT a valid BST.\n");

    // Example 3: Invalid BST [10, 5, 15, null, null, 6, 20]
    struct TreeNode* root3 = newNode(10);
    root3->left = newNode(5);
    root3->right = newNode(15);
    root3->right->left = newNode(6);
    root3->right->right = newNode(20);

    if (isValidBST(root3))
        printf("Example 3: The tree is a valid BST.\n");
    else
        printf("Example 3: The tree is NOT a valid BST.\n");

    return 0;
}
