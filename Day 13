#include <stdio.h>
#include <string.h>

// Function to expand around center and return length of palindrome
int expandAroundCenter(char *s, int left, int right, int n) {
    while (left >= 0 && right < n && s[left] == s[right]) {
        left--;
        right++;
    }
    // Return length of palindrome found
    return right - left - 1;
}

// Function to find longest palindromic substring
void longestPalindrome(char *s, char *result) {
    int n = strlen(s);
    if (n == 0) {
        result[0] = '\0';
        return;
    }

    int start = 0, maxLen = 1; // at least one char is palindrome

    for (int i = 0; i < n; i++) {
        // Odd length palindrome centered at i
        int len1 = expandAroundCenter(s, i, i, n);
        // Even length palindrome centered between i and i+1
        int len2 = expandAroundCenter(s, i, i + 1, n);

        int len = (len1 > len2) ? len1 : len2;

        if (len > maxLen) {
            maxLen = len;
            start = i - (len - 1) / 2;
        }
    }

    // Copy longest palindrome into result
    strncpy(result, s + start, maxLen);
    result[maxLen] = '\0';
}

int main() {
    char s[1001];
    scanf("%1000s", s);

    char result[1001];
    longestPalindrome(s, result);

    printf("%s\n", result);
    return 0;
}
