#include <stdio.h>
#include <stdlib.h>

// Deque implementation
typedef struct {
    int *data;
    int front, rear, size, capacity;
} Deque;

Deque* createDeque(int capacity) {
    Deque* dq = (Deque*)malloc(sizeof(Deque));
    dq->capacity = capacity;
    dq->data = (int*)malloc(sizeof(int) * capacity);
    dq->front = 0;
    dq->rear = -1;
    dq->size = 0;
    return dq;
}

int isEmpty(Deque* dq) {
    return dq->size == 0;
}

int front(Deque* dq) {
    return dq->data[dq->front];
}

void popFront(Deque* dq) {
    if (!isEmpty(dq)) {
        dq->front = (dq->front + 1) % dq->capacity;
        dq->size--;
    }
}

void popBack(Deque* dq) {
    if (!isEmpty(dq)) {
        dq->rear = (dq->rear - 1 + dq->capacity) % dq->capacity;
        dq->size--;
    }
}

void pushBack(Deque* dq, int value) {
    dq->rear = (dq->rear + 1) % dq->capacity;
    dq->data[dq->rear] = value;
    dq->size++;
}

// Sliding Window Maximum
void slidingWindowMax(int arr[], int n, int k) {
    Deque* dq = createDeque(n);
    
    for (int i = 0; i < n; i++) {
        // Remove indices out of this window
        if (!isEmpty(dq) && front(dq) <= i - k)
            popFront(dq);

        // Remove smaller elements (not useful)
        while (!isEmpty(dq) && arr[dq->data[dq->rear]] <= arr[i])
            popBack(dq);

        // Add current element index
        pushBack(dq, i);

        // Print max for current window
        if (i >= k - 1)
            printf("%d ", arr[front(dq)]);
    }
    printf("\n");
}

// Driver Code
int main() {
    int arr1[] = {1, 3, -1, -3, 5, 3, 6, 7};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int k1 = 3;
    printf("Output 1: ");
    slidingWindowMax(arr1, n1, k1); // Expected: 3 3 5 5 6 7

    int arr2[] = {1, 5, 3, 2, 4, 6};
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    int k2 = 3;
    printf("Output 2: ");
    slidingWindowMax(arr2, n2, k2); // Expected: 5 5 4 6

    int arr3[] = {1, 2, 3, 4};
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    int k3 = 2;
    printf("Output 3: ");
    slidingWindowMax(arr3, n3, k3); // Expected: 2 3 4

    int arr4[] = {7, 7, 7, 7};
    int n4 = sizeof(arr4) / sizeof(arr4[0]);
    int k4 = 1;
    printf("Output 4: ");
    slidingWindowMax(arr4, n4, k4); // Expected: 7 7 7 7

    return 0;
}
