#include <stdio.h>

#define MAX 100000

struct Element {
    int value;
    int count;
};

int firstElementToRepeatKTimes(int arr[], int n, int k) {
    struct Element freq[MAX];  // store values and counts
    int size = 0;

    // Count frequencies
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < size; j++) {
            if (freq[j].value == arr[i]) {
                freq[j].count++;
                found = 1;
                break;
            }
        }
        if (!found) {
            freq[size].value = arr[i];
            freq[size].count = 1;
            size++;
        }
    }

    // Traverse array in original order
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < size; j++) {
            if (freq[j].value == arr[i] && freq[j].count == k) {
                return arr[i];
            }
        }
    }

    return -1; // If not found
}

int main() {
    int arr1[] = {3, 1, 4, 4, 5, 2, 6, 1, 4};
    int k1 = 2;
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    printf("Output: %d\n", firstElementToRepeatKTimes(arr1, n1, k1)); // Expected 1

    int arr2[] = {2, 3, 4, 2, 2, 5, 5};
    int k2 = 2;
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("Output: %d\n", firstElementToRepeatKTimes(arr2, n2, k2)); // Expected 5

    int arr3[] = {1, 1, 1, 1};
    int k3 = 1;
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    printf("Output: %d\n", firstElementToRepeatKTimes(arr3, n3, k3)); // Expected -1

    int arr4[] = {10};
    int k4 = 1;
    int n4 = sizeof(arr4) / sizeof(arr4[0]);
    printf("Output: %d\n", firstElementToRepeatKTimes(arr4, n4, k4)); // Expected 10

    int arr5[] = {6, 6, 6, 6, 7, 7, 8, 8, 8};
    int k5 = 3;
    int n5 = sizeof(arr5) / sizeof(arr5[0]);
    printf("Output: %d\n", firstElementToRepeatKTimes(arr5, n5, k5)); // Expected 8

    return 0;
}
