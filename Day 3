#include <stdio.h>

int findDuplicate(int arr[], int size) {
    // Phase 1: Detect cycle (intersection point)
    int slow = arr[0];
    int fast = arr[0];

    do {
        slow = arr[slow];           // Move one step
        fast = arr[arr[fast]];      // Move two steps
    } while (slow != fast);

    // Phase 2: Find the entrance to the cycle (duplicate number)
    int slow2 = arr[0];
    while (slow != slow2) {
        slow = arr[slow];
        slow2 = arr[slow2];
    }

    return slow;  // Duplicate number
}

int main() {
    // Test Cases
    int arr1[] = {1, 3, 4, 2, 2};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    printf("Duplicate number: %d\n", findDuplicate(arr1, size1)); // Output: 2

    int arr2[] = {3, 1, 3, 4, 2};
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    printf("Duplicate number: %d\n", findDuplicate(arr2, size2)); // Output: 3

    int arr3[] = {1, 1};
    int size3 = sizeof(arr3) / sizeof(arr3[0]);
    printf("Duplicate number: %d\n", findDuplicate(arr3, size3)); // Output: 1

    int arr4[] = {1, 4, 4, 2, 3};
    int size4 = sizeof(arr4) / sizeof(arr4[0]);
    printf("Duplicate number: %d\n", findDuplicate(arr4, size4)); // Output: 4

    // Large test (edge case)
    // Example: [1,2,3,...,99999,50000]
    // Not printing due to size, but works similarly.

    return 0;
}
